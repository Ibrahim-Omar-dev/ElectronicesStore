@{
    ViewData["Title"] = "Checkout";
}

<script src="https://www.paypal.com/sdk/js?client-id=@ViewBag.PaypalClientId&currency=USD"></script>

<div class="mx-auto p-4 rounded border shadow" style="width:420px; margin-top: 50px;">
    <h2 class="text-center mb-5">Complete Your Order</h2>
    <p><strong>Total Amount:</strong> $@ViewBag.total</p>
    <p><strong>Delivery Address:</strong> @ViewBag.deliveryAddress</p>
    <br />
    <div id="notification-container"></div>
    <div id="paypal-button-container"></div>
</div>

<script>
    paypal.Buttons({
        async createOrder() {
            try {
                const response = await fetch("@Url.Action("CreateOrder", "CheckOut")", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const order = await response.json();

                if (!order.id) {
                    throw new Error(order.error || 'Failed to create order');
                }

                return order.id;
            } catch (error) {
                console.error('Error creating order:', error);
                alert("❌ Error creating order: " + error.message);
                throw error;
            }
        },

        onApprove: async function(data, actions) {
            try {
                const deliveryAddress = "@Html.Raw(Html.Encode(ViewBag.deliveryAddress))";

                const response = await fetch("@Url.Action("CaptureOrder", "CheckOut")", {
                    method: "POST",
                    headers: { 
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ 
                        orderId: data.orderID,
                        deliveryAddress: deliveryAddress
                    })
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                const result = await response.json();

                if (result.status === "Success") {
                    alert("✅ Payment successful! Order ID: " + data.orderID);
                    // Redirect to success page
                    window.location.href = "@Url.Action("OrderSuccess", "Order")?orderId=" + data.orderID;
                } else {
                    throw new Error(result.error || result.message || "Payment capture failed");
                }
            } catch (error) {
                console.error('Error capturing payment:', error);
                alert("❌ Error processing payment: " + error.message);
            }
        },

        onCancel: function(data) {
            console.log('Payment cancelled:', data);
            alert("❌ Payment cancelled by user.");
        },

        onError: function(err) {
            console.error("PayPal error:", err);
            alert("⚠️ An error occurred while processing the payment. Please try again.");
        }
    }).render('#paypal-button-container');
</script>

@section Scripts {
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
}